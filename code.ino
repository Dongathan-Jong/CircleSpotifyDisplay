#include <SpotifyEsp32.h>
#include <Adafruit_GC9A01A.h>

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>
#include <Fonts/FreeMonoBold12pt7b.h>

#define CS 5
#define DC 2
#define RST 4
#define MOSI 3
#define SCLK 1

char* SSID =
const char* PASSWORD = 
const char* CLIENT_ID = 
const char* CLIENT_SECRET = 
const char* REFRESH_TOKEN = 

const unsigned char spotifyLogo[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0x8b, 0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x78, 0x52, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xb9, 0x87, 0xac, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x46, 0x58, 0x43, 0x34, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0a, 0x39, 0xa9, 0xa7, 0xbc, 0xc9, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x12, 0xc6, 0x56, 0x48, 0x43, 0x36, 0x88, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x6d, 0x39, 0xa9, 0xb7, 0xac, 0x49, 0x54, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x92, 0xc4, 0x46, 0x48, 0x53, 0xb6, 0xab, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x06, 0x6d, 0x3b, 0xb9, 0x97, 0xac, 0x49, 0x54, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x09, 0x92, 0x44, 0x46, 0x68, 0x53, 0x96, 0xaa, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x6a, 0x4d, 0xbb, 0xa9, 0x93, 0xa8, 0x69, 0x55, 0xd8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x15, 0xb2, 0x44, 0x56, 0x6c, 0x57, 0x92, 0xaa, 0x24, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xea, 0x4d, 0xab, 0xa8, 0x93, 0xa8, 0x6d, 0x45, 0xcb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x15, 0xa2, 0x54, 0x57, 0x68, 0x55, 0x92, 0xba, 0x34, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x06, 0xe2, 0x5d, 0xa3, 0xa8, 0x97, 0xaa, 0x69, 0x45, 0xca, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x09, 0x1d, 0xa2, 0x5c, 0x47, 0x68, 0x55, 0x96, 0xaa, 0x35, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x0a, 0xe2, 0x4d, 0xa3, 0xb8, 0x95, 0xaa, 0x69, 0x54, 0xca, 0x90, 0x00, 0x00,
  0x00, 0x00, 0x35, 0x15, 0xb2, 0x4c, 0x47, 0x2a, 0x54, 0x96, 0xab, 0x35, 0x64, 0x00, 0x00,
  0x00, 0x00, 0x0a, 0xea, 0x45, 0xb3, 0xa8, 0xd4, 0xab, 0x69, 0x54, 0x4a, 0x98, 0x00, 0x00,
  0x00, 0x00, 0xf5, 0x15, 0xba, 0x4c, 0x57, 0x2b, 0x54, 0x92, 0xab, 0xb4, 0x65, 0x00, 0x00,
  0x00, 0x01, 0x08, 0xe8, 0x45, 0xa3, 0xa8, 0xd4, 0xa9, 0x6d, 0x54, 0x4b, 0x9a, 0x00, 0x00,
  0x00, 0x02, 0x77, 0x17, 0xba, 0x5c, 0x55, 0x29, 0x56, 0x92, 0xa3, 0xb4, 0x65, 0x80, 0x00,
  0x00, 0x01, 0x88, 0xe8, 0x45, 0xa3, 0xaa, 0xd6, 0xa9, 0x65, 0x5c, 0x4a, 0x9a, 0x40, 0x00,
  0x00, 0x02, 0x75, 0x13, 0xaa, 0x54, 0x55, 0x29, 0x52, 0x9a, 0xa3, 0x95, 0x64, 0xa0, 0x00,
  0x00, 0x0d, 0x8a, 0xec, 0x55, 0xab, 0xaa, 0x54, 0xad, 0x61, 0x54, 0x6a, 0x1b, 0x40, 0x00,
  0x00, 0x02, 0x75, 0x13, 0xa2, 0x50, 0x45, 0xab, 0x52, 0x9e, 0xab, 0x95, 0xe4, 0x30, 0x00,
  0x00, 0x1c, 0x88, 0xe4, 0x5d, 0xaf, 0xba, 0x54, 0xad, 0x21, 0x54, 0x6a, 0x1b, 0xc8, 0x00,
  0x00, 0x23, 0x77, 0x1b, 0xa2, 0x50, 0x45, 0xab, 0x52, 0xde, 0xab, 0x94, 0xe4, 0x34, 0x00,
  0x00, 0x0c, 0x88, 0xe4, 0x2d, 0xaf, 0xba, 0x50, 0x8d, 0x21, 0x44, 0x2b, 0x0b, 0xc8, 0x00,
  0x00, 0x73, 0x57, 0x1b, 0xd2, 0x40, 0x04, 0xaf, 0x72, 0xd6, 0xbb, 0xd4, 0xf4, 0x32, 0x00,
  0x00, 0x8c, 0xa8, 0xe4, 0x15, 0xbf, 0xfb, 0x50, 0x8d, 0x29, 0x44, 0x2b, 0x0a, 0xcc, 0x00,
  0x00, 0x33, 0x53, 0x0b, 0xea, 0x40, 0x04, 0xaf, 0x52, 0xd2, 0xab, 0xc4, 0xf5, 0x32, 0x00,
  0x00, 0xcc, 0xac, 0xf4, 0x00, 0x00, 0x00, 0x00, 0xad, 0x2d, 0x54, 0x3b, 0x0a, 0x4c, 0x00,
  0x00, 0xb1, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xd2, 0xaa, 0xc4, 0xb5, 0xb3, 0x00,
  0x01, 0x4e, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x55, 0x2b, 0x4a, 0x4c, 0x80,
  0x00, 0xb1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0xd4, 0x95, 0x33, 0x00,
  0x03, 0x4a, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x2b, 0x6a, 0xcc, 0xa0,
  0x00, 0xb5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xd4, 0x95, 0x13, 0x00,
  0x07, 0x4a, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x29, 0x6a, 0xec, 0xc0,
  0x00, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x91, 0x13, 0x20,
  0x07, 0x0a, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x6e, 0xe4, 0xc0,
  0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x91, 0x1b, 0x20,
  0x0b, 0x0a, 0xb8, 0x00, 0x00, 0x54, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xe0, 0xc0,
  0x04, 0xb5, 0x44, 0x00, 0x56, 0x81, 0x0c, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1f, 0x20,
  0x0b, 0x4a, 0x9a, 0x2a, 0x88, 0xbe, 0xf3, 0x0b, 0x40, 0x00, 0x00, 0x00, 0x06, 0xa0, 0xd0,
  0x14, 0x95, 0x65, 0x91, 0x77, 0x41, 0x0c, 0xf4, 0xaa, 0x00, 0x00, 0x00, 0x01, 0x5f, 0x28,
  0x0b, 0x6a, 0x9a, 0x6e, 0x88, 0xbe, 0xf3, 0x09, 0x55, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0xc0,
  0x14, 0x94, 0x64, 0x91, 0x75, 0x40, 0x04, 0xb6, 0xaa, 0x4a, 0x00, 0x00, 0x01, 0x57, 0x38,
  0x0b, 0x6b, 0x9b, 0x6a, 0x8a, 0xbf, 0xfb, 0x49, 0x54, 0xb5, 0x20, 0x00, 0x00, 0xa8, 0xc0,
  0x14, 0x14, 0x64, 0x95, 0x75, 0x00, 0x04, 0xb6, 0x9b, 0x4a, 0x50, 0x00, 0x01, 0x53, 0x28,
  0x17, 0xeb, 0x8b, 0x6a, 0x0a, 0xff, 0xfb, 0x41, 0x64, 0x95, 0xa4, 0x00, 0x00, 0xac, 0xd0,
  0x10, 0x10, 0x74, 0x95, 0xf5, 0x00, 0x04, 0xbe, 0x8b, 0x6a, 0x5b, 0x40, 0x01, 0x53, 0x28,
  0x17, 0xef, 0x8b, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x74, 0x95, 0xa4, 0x50, 0x02, 0xac, 0xd0,
  0x28, 0x10, 0x74, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x6a, 0x4b, 0xa4, 0x01, 0x43, 0x24,
  0x13, 0xe7, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0xb4, 0x51, 0x16, 0xbc, 0x58,
  0x2c, 0x18, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x4a, 0xae, 0xa9, 0x43, 0xa0,
  0x13, 0xe7, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb5, 0x51, 0x26, 0xac, 0x58,
  0x24, 0x08, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x6e, 0xd9, 0x53, 0xa4,
  0x1b, 0xf7, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x81, 0x26, 0x6c, 0x58,
  0x24, 0x08, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7e, 0x59, 0x92, 0xa0,
  0x1b, 0x75, 0xaa, 0x00, 0x00, 0x22, 0x50, 0x00, 0x00, 0x00, 0x00, 0x81, 0xa6, 0x2d, 0x5c,
  0x04, 0x8a, 0x54, 0x80, 0x2b, 0x4c, 0xa7, 0x52, 0x00, 0x00, 0x00, 0x3e, 0x49, 0xd2, 0x20,
  0x3b, 0x75, 0xab, 0x4d, 0x48, 0xb3, 0x4c, 0xa5, 0x00, 0x00, 0x00, 0x01, 0xb6, 0x2d, 0xd8,
  0x04, 0x8a, 0x54, 0xa1, 0x57, 0x44, 0xb1, 0x52, 0xb2, 0x00, 0x00, 0x06, 0x49, 0xd2, 0x20,
  0x1b, 0x35, 0xa9, 0x5e, 0xa8, 0xbb, 0x4e, 0xad, 0x4c, 0x00, 0x00, 0x00, 0xb4, 0x25, 0xc8,
  0x04, 0xc8, 0x56, 0xa1, 0x55, 0x44, 0x51, 0x52, 0x92, 0xd8, 0x00, 0x03, 0x4b, 0xda, 0x30,
  0x1b, 0x37, 0xa9, 0x2e, 0xaa, 0xbb, 0xae, 0xa5, 0x6d, 0x25, 0x00, 0x00, 0xb4, 0x25, 0xc8,
  0x04, 0xc8, 0x56, 0xd1, 0x55, 0x04, 0x21, 0x5a, 0x92, 0xc8, 0x80, 0x01, 0x4b, 0xd2, 0x20,
  0x1b, 0x33, 0x89, 0x0e, 0x8a, 0xfb, 0xde, 0xa5, 0x2d, 0x37, 0x48, 0x01, 0x30, 0x2d, 0xd8,
  0x04, 0x4c, 0x76, 0xf1, 0x75, 0x00, 0x01, 0x5a, 0xd2, 0x48, 0x94, 0x02, 0xcf, 0xd2, 0x20,
  0x0b, 0xb3, 0x89, 0x0e, 0x80, 0x00, 0x00, 0x05, 0x2d, 0xb5, 0x68, 0x25, 0x30, 0x25, 0xc0,
  0x04, 0x4c, 0x56, 0x70, 0x00, 0x00, 0x00, 0x00, 0x52, 0x4a, 0x93, 0x0a, 0xcb, 0xda, 0x30,
  0x0b, 0xa3, 0xa9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0xb4, 0xec, 0xf5, 0x34, 0x25, 0x40,
  0x04, 0x5c, 0x56, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x13, 0x08, 0xcb, 0xda, 0xa0,
  0x03, 0xa3, 0xa1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6c, 0x77, 0x34, 0x25, 0x20,
  0x04, 0x54, 0x5e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x93, 0x88, 0xca, 0xda, 0xc0,
  0x03, 0xab, 0xa1, 0xa0, 0x00, 0x52, 0x90, 0x00, 0x00, 0x00, 0x6c, 0x75, 0x35, 0x25, 0x00,
  0x00, 0x34, 0x5e, 0x40, 0x1d, 0x2d, 0x6a, 0xc4, 0x00, 0x00, 0x11, 0x8a, 0xca, 0x58, 0xc0,
  0x03, 0xca, 0xa0, 0xbb, 0x62, 0xd2, 0x15, 0x29, 0x00, 0x00, 0x0e, 0x74, 0x35, 0xa7, 0x00,
  0x00, 0x15, 0x5f, 0x44, 0x95, 0x25, 0xea, 0xd5, 0x50, 0x00, 0x01, 0x8b, 0xca, 0x58, 0x80,
  0x01, 0xea, 0x20, 0x9a, 0x6a, 0xda, 0x15, 0x2a, 0xaa, 0x00, 0x02, 0x54, 0x31, 0xa7, 0x00,
  0x00, 0x15, 0xdf, 0x65, 0x92, 0x25, 0xe2, 0xd5, 0x55, 0x40, 0x01, 0xaa, 0xce, 0x48, 0x00,
  0x00, 0xea, 0x20, 0x9a, 0x6d, 0xda, 0x1d, 0x2a, 0x8a, 0xa8, 0x00, 0x55, 0x31, 0xb7, 0x00,
  0x00, 0x11, 0xd7, 0x65, 0x92, 0x24, 0xe2, 0x95, 0x75, 0x10, 0x01, 0xa6, 0xca, 0x48, 0x00,
  0x00, 0x6e, 0x28, 0x98, 0x65, 0xcb, 0x1d, 0x6a, 0x8a, 0xee, 0x81, 0x59, 0x35, 0xb2, 0x00,
  0x00, 0x11, 0xd3, 0x67, 0x9a, 0x34, 0xe2, 0x95, 0x35, 0x11, 0x43, 0x22, 0xca, 0x4c, 0x00,
  0x00, 0x26, 0x2c, 0x98, 0x65, 0xcb, 0x0d, 0x2a, 0xc8, 0xe6, 0x2c, 0xdd, 0x35, 0x30, 0x00,
  0x00, 0x19, 0xd3, 0x27, 0x9a, 0x34, 0xf2, 0xd5, 0x37, 0x19, 0xd1, 0x22, 0x4a, 0xc8, 0x00,
  0x00, 0x06, 0x2c, 0xd8, 0x25, 0x49, 0x0d, 0x12, 0xc8, 0xe6, 0x2e, 0xdd, 0xb5, 0x30, 0x00,
  0x00, 0x08, 0xd3, 0x27, 0xda, 0xb6, 0xf2, 0xed, 0x35, 0x19, 0x51, 0x22, 0x4a, 0x40, 0x00,
  0x00, 0x07, 0x2c, 0xc8, 0x25, 0x49, 0x0d, 0x12, 0x4a, 0xe6, 0xae, 0x5d, 0x95, 0xa0, 0x00,
  0x00, 0x00, 0x51, 0x37, 0xca, 0x96, 0xb2, 0x6d, 0xb5, 0x09, 0x51, 0xa2, 0x6a, 0x40, 0x00,
  0x00, 0x03, 0xae, 0xc8, 0x35, 0x69, 0x4d, 0x92, 0x4a, 0xf6, 0x96, 0x55, 0x94, 0x80, 0x00,
  0x00, 0x00, 0x51, 0x35, 0xca, 0x96, 0x92, 0x6d, 0xb1, 0x09, 0x69, 0xaa, 0x6b, 0x00, 0x00,
  0x00, 0x00, 0xaa, 0xca, 0x35, 0x69, 0x6d, 0x10, 0x4e, 0xf4, 0x8e, 0x31, 0x94, 0x00, 0x00,
  0x00, 0x00, 0x55, 0x35, 0xc8, 0x92, 0x92, 0xef, 0xb1, 0x0b, 0x71, 0xce, 0x6a, 0x00, 0x00,
  0x00, 0x00, 0x2a, 0x4a, 0x37, 0x6d, 0x6d, 0x10, 0x4e, 0x74, 0x86, 0x11, 0x84, 0x00, 0x00,
  0x00, 0x00, 0x15, 0xb4, 0xc8, 0x92, 0x92, 0xaf, 0x91, 0x8b, 0x79, 0xee, 0x78, 0x00, 0x00,
  0x00, 0x00, 0x0a, 0x4b, 0x33, 0x6d, 0x2d, 0x50, 0x6e, 0x74, 0x86, 0x11, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x04, 0xb4, 0xcc, 0x92, 0xd2, 0xab, 0x91, 0x89, 0x79, 0xea, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x49, 0x31, 0x65, 0x25, 0x54, 0x66, 0x56, 0x82, 0x15, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xb6, 0xce, 0x9a, 0xda, 0xab, 0x99, 0xa8, 0x7d, 0xe9, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x49, 0x31, 0x65, 0x25, 0x54, 0x66, 0x57, 0x81, 0x16, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x36, 0x8e, 0x9a, 0xda, 0x2a, 0x99, 0xa8, 0x7e, 0x68, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x09, 0x71, 0x44, 0x25, 0xd5, 0x66, 0x57, 0x81, 0x90, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x06, 0x86, 0xbb, 0xda, 0x2a, 0x58, 0xa0, 0x5e, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x79, 0x44, 0x24, 0xd5, 0x87, 0x5f, 0xa1, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x86, 0xba, 0xdb, 0x2a, 0x78, 0xa0, 0x56, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x39, 0x45, 0x24, 0x54, 0x87, 0x57, 0xa8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x3a, 0x5b, 0xab, 0x78, 0xa8, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc5, 0xa4, 0x54, 0x45, 0x57, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x5b, 0xab, 0xba, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa0, 0x44, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0xbb, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char spotifySmall[] PROGMEM = {
  0x00, 0x07, 0x80, 0x00,
  0x00, 0x3f, 0xf0, 0x00,
  0x00, 0xff, 0xfc, 0x00,
  0x03, 0xff, 0xff, 0x00,
  0x07, 0xff, 0xff, 0x80,
  0x0f, 0xff, 0xff, 0xc0,
  0x1f, 0xff, 0xff, 0xe0,
  0x1f, 0xff, 0xff, 0xe0,
  0x3f, 0x80, 0x7f, 0xf0,
  0x38, 0x00, 0x03, 0xf0,
  0x78, 0x00, 0x00, 0xf8,
  0x78, 0xff, 0xc0, 0x78,
  0x7f, 0xff, 0xf8, 0x38,
  0xff, 0x80, 0x7f, 0x7c,
  0xfc, 0x00, 0x0f, 0xfc,
  0xfc, 0x00, 0x03, 0xfc,
  0xff, 0xff, 0xe0, 0xfc,
  0x7f, 0xff, 0xf8, 0xf8,
  0x7e, 0x00, 0x3f, 0xf8,
  0x7e, 0x00, 0x0f, 0xf8,
  0x3f, 0xff, 0x83, 0xf0,
  0x3f, 0xff, 0xf3, 0xf0,
  0x1f, 0xff, 0xff, 0xe0,
  0x1f, 0xff, 0xff, 0xe0,
  0x0f, 0xff, 0xff, 0xc0,
  0x07, 0xff, 0xff, 0x80,
  0x03, 0xff, 0xff, 0x00,
  0x00, 0xff, 0xfc, 0x00,
  0x00, 0x3f, 0xf0, 0x00,
  0x00, 0x07, 0x80, 0x00
};


String lastTrackName = "";
String currentTrackName = "";

String lastArtistName = "";
String currentArtistName = "";

uint16_t tempWidth;
uint16_t tempHeight;
int16_t tempOne;
int16_t tempTwo;

boolean secondHalfDraw = false;
boolean lastHalfDraw = false;

Adafruit_GC9A01A tft(CS, DC, MOSI, SCLK, RST);

Spotify sp(CLIENT_ID, CLIENT_SECRET);

void setup() {
  WiFi.begin(SSID, PASSWORD);
  Serial.println("");

  tft.begin();
  tft.setRotation(0);
  tft.fillScreen(GC9A01A_BLACK);
  tft.setFont(&FreeMonoBold12pt7b);
  tft.drawBitmap(60, 60, spotifyLogo, 120, 120, GC9A01A_GREEN);

  tft.setCursor(38, 200);
  
  Serial.begin(115200);
  Serial.println("Initializing display");



  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  tft.print(WiFi.localIP().toString().c_str());

  Serial.println();
  Serial.println(WiFi.localIP());
  sp.begin();

  while (!sp.is_auth()) {
    sp.handle_client();
  }

  Serial.println("Authed");

  tft.fillScreen(GC9A01A_BLACK);
  tft.drawBitmap(105, 20, spotifySmall, 30, 30, GC9A01A_GREEN);
}

void loop() {
  checkNewInfo();

  delay(2000);
}

void checkNewInfo() {
  currentTrackName = sp.current_track_name();
  currentArtistName = sp.current_artist_names();

  if (lastTrackName != currentTrackName && currentTrackName != "Something went wrong" && currentTrackName.indexOf("null") == -1 && currentTrackName != "") {

    lastTrackName = currentTrackName;

    Serial.print("track: ");
    Serial.println(lastTrackName);

    updateTrack();
  }


  if (lastArtistName != currentArtistName && currentArtistName != "Something went wrong" && currentArtistName.indexOf("null") == -1 && currentArtistName != "") {
    lastArtistName = currentArtistName;
    Serial.print("Artist: ");
    Serial.println(lastArtistName);

    updateArtist();
  }
}

void updateTrack() {
  String firstHalf;
  String secondHalf;
  String lastHalf;
  int xCoord;
  int spaceChar = 0;

  if (lastTrackName.length() <= 14) {
    tft.setTextSize(1);
    tft.fillRect(0, 50, 240, 190, GC9A01A_BLACK);
    tft.getTextBounds(lastTrackName, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);
    xCoord = (240 - tempWidth) / 2;
    tft.setCursor(xCoord, 90);
    tft.print(lastTrackName);
    secondHalfDraw = false;
    lastHalfDraw = false;
  }
  if (lastTrackName.length() > 14) {
    for (int i = 14; i >= 0; i--) {
      if (lastTrackName.charAt(i) == ' ') {
        spaceChar = i;
        firstHalf = lastTrackName.substring(0, i);
        Serial.print("First Half: ");
        Serial.println(firstHalf);
        secondHalf = lastTrackName.substring(i+1, lastTrackName.length());
        if (secondHalf.length() > 15) 
        {
          for(int j = 15; j >= 0; j--)
          {
            if(secondHalf.charAt(j) == ' ')
            {

              spaceChar = j;
              lastHalf = secondHalf.substring(j+1,secondHalf.length());
              secondHalf = secondHalf.substring(0,j);

              Serial.print("Second half: ");
              Serial.println(secondHalf);
              secondHalfDraw = true;

              Serial.print("Last Part: ");
              Serial.println(lastHalf);
              lastHalfDraw = true;
              break;
            }
          }
        } 
        else 
        {
          Serial.print("Second half: ");
          Serial.println(secondHalf);
          secondHalfDraw = true;
          lastHalfDraw = false;
        }
        break;
      }
    }
    
    tft.fillRect(0, 50, 240, 190, GC9A01A_BLACK);
    tft.setTextSize(0.4);
    tft.getTextBounds(firstHalf, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

    xCoord = (240 - tempWidth) / 2;

    tft.setCursor(xCoord, 90); 
    tft.print(firstHalf);


    tft.getTextBounds(secondHalf, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

    xCoord = (240 - tempWidth) / 2;
    tft.setCursor(xCoord, 115);
    tft.print(secondHalf);

    tft.getTextBounds(lastHalf, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

    xCoord = (240 - tempWidth) / 2;
    tft.setCursor(xCoord, 140);
    tft.print(lastHalf);


  }
}

void updateArtist() 
{
  String firstArtist;
  String secondArtist;
  String lastArtist;
  int numArtists = 1;
  int index;
  int index2;
  int xCoord;

  for(int i = 0; i < lastArtistName.length(); i++)
  {
    if(lastArtistName.charAt(i) == ',')
    {
      numArtists++;
    }
  }

  if(lastHalfDraw)
  {
    if(numArtists == 1)
    {
      tft.getTextBounds(lastArtistName, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

      xCoord = (240 - tempWidth) / 2;
      tft.setCursor(xCoord, 165);
      tft.print(lastArtistName);
      
    }
    else if(numArtists == 2)
    {
      for(int i = 0; i < lastArtistName.length(); i++)
      {
        if(lastArtistName.charAt(i) == ',')
        {
          index = i;
          break;
        }
      }

      firstArtist = lastArtistName.substring(0, index);
      secondArtist = lastArtistName.substring(index+1, lastArtistName.length());

      tft.getTextBounds(firstArtist, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

      xCoord = (240 - tempWidth) / 2;
      tft.setCursor(xCoord, 165);
      tft.print(firstArtist);
      
      tft.getTextBounds(secondArtist, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

      xCoord = (240 - tempWidth) / 2;
      tft.setCursor(xCoord, 190);
      tft.print(secondArtist);
      
    }
    else if(numArtists >= 3)
    {
      for(int i = 0; i < lastArtistName.length(); i++)
      {
        if(lastArtistName.charAt(i) == ',')
        {
          index = i;
          break;
        }
      }

      for(int i = index + 1 ; i < lastArtistName.length(); i++)
      {
        if(lastArtistName.charAt(i) == ',')
        {
          index2 = i;
          break;
        }
      }

      for(int i = index2 + 1; i < lastArtistName.length(); i++)
      {
        if(lastArtistName.charAt(i) == ',')
        {
          index3 = i;
          break;
        }
        else
        {
          index3 = lastArtistName.length();
        }
      }

      firstArtist = lastArtistName.substring(0, index);
      secondArtist = lastArtistName.substring(index + 1, index2);
      lastArtist = lastArtistName.substring(index2 + 1, index3);

      tft.getTextBounds(firstArtist, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

      xCoord = (240 - tempWidth) / 2;
      tft.setCursor(xCoord, 165);
      tft.print(firstArtist);
      tft.getTextBounds(secondArtist, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

      xCoord = (240 - tempWidth) / 2;
      tft.setCursor(xCoord, 190);
      tft.print(secondArtist);
      tft.getTextBounds(lastArtist, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

      xCoord = (240 - tempWidth) / 2;
      tft.setCursor(xCoord, 215);
      tft.print(lastArtist);
    }
  }
  else if(secondHalfDraw)
  {
    if(numArtists == 1)
    {
      tft.getTextBounds(lastArtistName, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

      xCoord = (240 - tempWidth) / 2;
      tft.setCursor(xCoord, 140);
      tft.print(lastArtistName);
      
    }
    else if(numArtists == 2)
    {
      for(int i = 0; i < lastArtistName.length(); i++)
      {
        if(lastArtistName.charAt(i) == ',')
        {
          index = i;
        }
      }

      firstArtist = lastArtistName.substring(0, i);
      secondArtist = lastArtistName.substring(i+1, lastArtistName.length());

      tft.getTextBounds(lastArtistName, 0, 0, &tempOne, &tempTwo, &tempWidth, &tempHeight);

    }
    else if(numArtists >= 3)
    {

    }
  }
}
